"""
GitHub API client for creating PRs and managing automation

Supports both GitHub App authentication and personal access tokens.
"""

import json
import subprocess
from pathlib import Path
from typing import Dict, Any, Optional, List


class GitHubClient:
    """
    GitHub client for PR creation and repository management

    Uses gh CLI for simplicity and better credential management.
    """

    def __init__(self, config: Dict[str, Any], dry_run: bool = False):
        self.config = config
        self.dry_run = dry_run
        self.enabled = config.get("github", {}).get("enabled", False)

    def create_pr(
        self,
        branch_name: str,
        title: str,
        body: str,
        files: List[str],
        labels: Optional[List[str]] = None
    ) -> Optional[str]:
        """
        Create a pull request

        Args:
            branch_name: Name of the branch to create (e.g., "automation/fix-CVE-123")
            title: PR title
            body: PR body (markdown)
            files: List of files to include in the PR
            labels: Optional labels to add

        Returns:
            PR URL if successful, None otherwise
        """
        if not self.enabled:
            print("GitHub integration disabled in config")
            return None

        if self.dry_run:
            print(f"[DRY RUN] Would create PR: {title}")
            print(f"  Branch: {branch_name}")
            print(f"  Files: {', '.join(files)}")
            return f"https://github.com/example/repo/pull/DRY-RUN"

        try:
            # Create branch
            subprocess.run(["git", "checkout", "-b", branch_name], check=True, capture_output=True)

            # Stage files
            subprocess.run(["git", "add"] + files, check=True, capture_output=True)

            # Commit
            subprocess.run(
                ["git", "commit", "-m", title],
                check=True,
                capture_output=True
            )

            # Push branch
            subprocess.run(
                ["git", "push", "-u", "origin", branch_name],
                check=True,
                capture_output=True
            )

            # Create PR using gh CLI
            cmd = ["gh", "pr", "create", "--title", title, "--body", body]
            if labels:
                cmd.extend(["--label", ",".join(labels)])

            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            pr_url = result.stdout.strip()

            print(f"Created PR: {pr_url}")
            return pr_url

        except subprocess.CalledProcessError as e:
            print(f"Failed to create PR: {e}")
            print(f"stderr: {e.stderr if hasattr(e, 'stderr') else 'N/A'}")
            # Clean up: return to main branch
            subprocess.run(["git", "checkout", "master"], capture_output=True)
            subprocess.run(["git", "branch", "-D", branch_name], capture_output=True)
            return None

    def format_pr_body(
        self,
        objective: str,
        changes: List[str],
        tests: List[str],
        rollback: str,
        risk: str
    ) -> str:
        """
        Format a PR body with required sections

        Args:
            objective: What this PR accomplishes
            changes: List of files/components changed
            tests: Tests added or updated
            rollback: Rollback instructions
            risk: Risk level (low, medium, high, critical)

        Returns:
            Formatted markdown PR body
        """
        risk_emoji = {
            "low": "ðŸŸ¢",
            "medium": "ðŸŸ¡",
            "high": "ðŸŸ ",
            "critical": "ðŸ”´"
        }.get(risk.lower(), "âšª")

        body = f"""## Objective

{objective}

## Changes

{self._format_list(changes)}

## Tests Added/Updated

{self._format_list(tests)}

## Rollback Plan

{rollback}

## Risk Assessment

{risk_emoji} **Risk Level**: {risk.upper()}

## Changelog Entry

```
- {objective}
```

---

ðŸ¤– Generated by agentic automation
"""
        return body

    def _format_list(self, items: List[str]) -> str:
        """Format a list as markdown bullets"""
        if not items:
            return "- No changes"
        return "\n".join(f"- {item}" for item in items)

    def add_label(self, pr_url: str, label: str):
        """Add a label to an existing PR"""
        if self.dry_run:
            print(f"[DRY RUN] Would add label '{label}' to {pr_url}")
            return

        try:
            subprocess.run(
                ["gh", "pr", "edit", pr_url, "--add-label", label],
                check=True,
                capture_output=True
            )
        except subprocess.CalledProcessError as e:
            print(f"Failed to add label: {e}")

    def request_review(self, pr_url: str, reviewers: List[str]):
        """Request review from specified users"""
        if self.dry_run:
            print(f"[DRY RUN] Would request review from {', '.join(reviewers)} on {pr_url}")
            return

        try:
            subprocess.run(
                ["gh", "pr", "edit", pr_url, "--add-reviewer", ",".join(reviewers)],
                check=True,
                capture_output=True
            )
        except subprocess.CalledProcessError as e:
            print(f"Failed to request review: {e}")
